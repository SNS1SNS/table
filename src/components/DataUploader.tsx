import React, { useState } from 'react';
import './DataUploader.css';

interface DataPoint {
  x: number;
  y: number;
  name: string;
}

interface DataUploaderProps {
  onCalibrationDataChange: (data: DataPoint[], calibrationDate: string, volumeDivider: number) => void;
  onRawDataChange: (data: DataPoint[]) => void;
}

const DataUploader = ({ 
  onCalibrationDataChange, 
  onRawDataChange 
}: DataUploaderProps) => {
  const [uploadStatus, setUploadStatus] = useState('');
  const [volumeDivider, setVolumeDivider] = useState<number>(1);
  const [lastXmlData, setLastXmlData] = useState<string>('');

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–ª–∏—Ç–µ–ª—è
  const handleDividerChange = (newDivider: number) => {
    setVolumeDivider(newDivider);
    
    // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ XML –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ö
    if (lastXmlData) {
      try {
        const { data, calibrationDate } = parseCalibrationXML(lastXmlData);
        onCalibrationDataChange(data, calibrationDate, newDivider);
        setUploadStatus(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã —Å –¥–µ–ª–∏—Ç–µ–ª–µ–º ${newDivider}`);
        setTimeout(() => setUploadStatus(''), 2000);
      } catch (error) {
        setUploadStatus(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        setTimeout(() => setUploadStatus(''), 3000);
      }
    }
  };

  // –ü–∞—Ä—Å–µ—Ä XML —Ç–∞—Ä–∏—Ä–æ–≤–æ—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
  const parseCalibrationXML = (xmlText: string): { data: DataPoint[], calibrationDate: string } => {
    const parser = new DOMParser();
    const xmlDoc = parser.parseFromString(xmlText, 'text/xml');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    const calibrationDateElement = xmlDoc.querySelector('calibrationDate');
    const calibrationDate = calibrationDateElement ? calibrationDateElement.textContent || '' : '';
    
    // –ò—â–µ–º –≤—Å–µ value —ç–ª–µ–º–µ–Ω—Ç—ã –≤ sensor
    const valueElements = xmlDoc.querySelectorAll('sensor value');
    const calibrationData: DataPoint[] = [];
    
    valueElements.forEach((element, index) => {
      const code = element.getAttribute('code');
      const value = element.textContent;
      
      if (code && value) {
        const originalVolume = parseInt(value);
        const adjustedVolume = originalVolume / volumeDivider; // –î–µ–ª–∏–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        
        calibrationData.push({
          x: parseInt(code), // –ö–æ–¥ –¥–∞—Ç—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 289)
          y: adjustedVolume, // –û–±—ä–µ–º –≤ –ª–∏—Ç—Ä–∞—Ö —Å —É—á–µ—Ç–æ–º –¥–µ–ª–∏—Ç–µ–ª—è
          name: `–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ ${index + 1}`
        });
      }
    });
    
    return {
      data: calibrationData.sort((a, b) => a.x - b.x),
      calibrationDate
    };
  };

  // –ü–∞—Ä—Å–µ—Ä CSV —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const parseRawDataCSV = (csvText: string): DataPoint[] => {
    const lines = csvText.trim().split('\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const firstLine = lines[0];
    const hasHeader = firstLine.includes(',') && (
      firstLine.toLowerCase().includes('time') || 
      firstLine.toLowerCase().includes('date') || 
      firstLine.toLowerCase().includes('–≤—Ä–µ–º—è') || 
      firstLine.toLowerCase().includes('–¥–∞—Ç–∞')
    );
    
    const dataLines = hasHeader ? lines.slice(1) : lines;
    
    return dataLines.map((line, index) => {
      const parts = line.split(',').map(v => v.trim().replace(/"/g, ''));
      
      if (parts.length < 2) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ ${index + 1}: ${line}`);
      }
      
      const dateTime = parts[0]; // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
      const sensorValue = parseFloat(parts[1]) || 0; // –ö–æ–¥ –¥–∞—Ç—á–∏–∫–∞
      
      return {
        x: index, // –ò–Ω–¥–µ–∫—Å –∏–∑–º–µ—Ä–µ–Ω–∏—è
        y: sensorValue, // –ö–æ–¥ –¥–∞—Ç—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2535)
        name: dateTime // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
      };
    }).filter(point => !isNaN(point.y));
  };

  const handleCalibrationUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setUploadStatus('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞—Ä–∏—Ä–æ–≤–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...');

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const xmlText = e.target?.result as string;
        const { data, calibrationDate } = parseCalibrationXML(xmlText);
        
        if (data.length === 0) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤ XML —Ñ–∞–π–ª–µ');
        }
        
        onCalibrationDataChange(data, calibrationDate, volumeDivider);
        setUploadStatus(`‚úÖ –¢–∞—Ä–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (${data.length} —Ç–æ—á–µ–∫)`);
        setTimeout(() => setUploadStatus(''), 3000);
        setLastXmlData(xmlText); // –°–æ—Ö—Ä–∞–Ω—è–µ–º XML –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
      } catch (error) {
        setUploadStatus(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        setTimeout(() => setUploadStatus(''), 5000);
      }
    };
    
    reader.readAsText(file);
  };

  const handleRawDataUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setUploadStatus('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...');

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const csvText = e.target?.result as string;
        const data = parseRawDataCSV(csvText);
        
        if (data.length === 0) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª–µ');
        }
        
        onRawDataChange(data);
        setUploadStatus(`‚úÖ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (${data.length} —Ç–æ—á–µ–∫)`);
        setTimeout(() => setUploadStatus(''), 3000);
      } catch (error) {
        setUploadStatus(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        setTimeout(() => setUploadStatus(''), 5000);
      }
    };
    
    reader.readAsText(file);
  };

  const downloadCalibrationTemplate = () => {
    const template = `<?xml version="1.0" encoding="UTF-8"?>
<vehicle>
  <sensor number="0">
    <value code="0">0</value>
    <value code="289">100</value>
    <value code="437">200</value>
    <value code="617">300</value>
    <value code="725">400</value>
    <value code="863">500</value>
    <value code="980">600</value>
    <value code="1134">700</value>
    <value code="1302">800</value>
    <value code="1445">900</value>
    <value code="1575">1000</value>
  </sensor>
</vehicle>`;
    
    const blob = new Blob([template], { type: 'application/xml' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'calibration-template.xml';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const downloadRawDataTemplate = () => {
    const template = '28.06.2025 07:03:29,2535\n28.06.2025 07:05:29,2534\n28.06.2025 07:07:29,2535\n28.06.2025 07:09:29,2535';
    const blob = new Blob([template], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'raw-data-template.csv';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="data-uploader">
      <div className="upload-buttons">
        <div className="upload-section">
          <h4>–¢–∞—Ä–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (XML)</h4>
          <div className="divider-input">
            <label htmlFor="volume-divider">–î–µ–ª–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞:</label>
            <input
              type="number"
              id="volume-divider"
              value={volumeDivider}
              onChange={(e) => handleDividerChange(parseFloat(e.target.value) || 1)}
              min="0.1"
              step="0.1"
              placeholder="1"
              className="divider-field"
            />
            <span className="divider-help">(–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –¥–ª—è –¥–µ–ª–µ–Ω–∏—è 100‚Üí10–ª, 200‚Üí20–ª. –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏)</span>
          </div>
          <input
            type="file"
            accept=".xml"
            onChange={handleCalibrationUpload}
            id="calibration-file"
            className="file-input"
          />
          <label htmlFor="calibration-file" className="file-label">
            üìä –í—ã–±—Ä–∞—Ç—å XML —Ñ–∞–π–ª
          </label>
          <button onClick={downloadCalibrationTemplate} className="btn btn-help">
            üìã –®–∞–±–ª–æ–Ω XML
          </button>
        </div>

        <div className="upload-section">
          <h4>–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (CSV)</h4>
          <input
            type="file"
            accept=".csv,.txt"
            onChange={handleRawDataUpload}
            id="raw-file"
            className="file-input"
          />
          <label htmlFor="raw-file" className="file-label">
            üìä –í—ã–±—Ä–∞—Ç—å CSV —Ñ–∞–π–ª
          </label>
          <button onClick={downloadRawDataTemplate} className="btn btn-help">
            üìã –®–∞–±–ª–æ–Ω CSV
          </button>
        </div>

        <div className="upload-help">
          <p><strong>–§–æ—Ä–º–∞—Ç XML:</strong> –¢–∞—Ä–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ &lt;value code="X"&gt;Y&lt;/value&gt;</p>
          <p><strong>–§–æ—Ä–º–∞—Ç CSV:</strong> –î–∞—Ç–∞ –í—Ä–µ–º—è,–ö–æ–¥_–¥–∞—Ç—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 28.06.2025 07:03:29,2535)</p>
        </div>

        {uploadStatus && (
          <div className={`upload-status ${uploadStatus.includes('‚ùå') ? 'error' : 'success'}`}>
            {uploadStatus}
          </div>
        )}
      </div>
    </div>
  );
};

export default DataUploader;